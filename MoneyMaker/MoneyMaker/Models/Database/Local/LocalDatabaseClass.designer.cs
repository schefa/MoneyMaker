#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MoneyMaker.Libraries.Database.Local
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LocalDatabase")]
	public partial class LocalDatabaseClassDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnCreated();
    partial void InsertWatchList(WatchList instance);
    partial void UpdateWatchList(WatchList instance);
    partial void DeleteWatchList(WatchList instance);
    partial void InsertBankAccount(BankAccount instance);
    partial void UpdateBankAccount(BankAccount instance);
    partial void DeleteBankAccount(BankAccount instance);
    partial void InsertDepot(Depot instance);
    partial void UpdateDepot(Depot instance);
    partial void DeleteDepot(Depot instance);
    partial void InsertLeasingCalculator(LeasingCalculator instance);
    partial void UpdateLeasingCalculator(LeasingCalculator instance);
    partial void DeleteLeasingCalculator(LeasingCalculator instance);
    partial void InsertLoanData(LoanData instance);
    partial void UpdateLoanData(LoanData instance);
    partial void DeleteLoanData(LoanData instance);
    partial void InsertManagerProfile(ManagerProfile instance);
    partial void UpdateManagerProfile(ManagerProfile instance);
    partial void DeleteManagerProfile(ManagerProfile instance);
    partial void InsertStocks(Stocks instance);
    partial void UpdateStocks(Stocks instance);
    partial void DeleteStocks(Stocks instance);
    partial void InsertStocksMap(StocksMap instance);
    partial void UpdateStocksMap(StocksMap instance);
    partial void DeleteStocksMap(StocksMap instance);
    partial void InsertUserLines(UserLines instance);
    partial void UpdateUserLines(UserLines instance);
    partial void DeleteUserLines(UserLines instance);
    partial void InsertUserProfile(UserProfile instance);
    partial void UpdateUserProfile(UserProfile instance);
    partial void DeleteUserProfile(UserProfile instance);
    partial void InsertTransactions(Transactions instance);
    partial void UpdateTransactions(Transactions instance);
    partial void DeleteTransactions(Transactions instance);
    #endregion
		
		public LocalDatabaseClassDataContext() : 
				base(global::MoneyMaker.Properties.Settings.Default.LocalDatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LocalDatabaseClassDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LocalDatabaseClassDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LocalDatabaseClassDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LocalDatabaseClassDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<WatchList> WatchList
		{
			get
			{
				return this.GetTable<WatchList>();
			}
		}
		
		public System.Data.Linq.Table<BankAccount> BankAccount
		{
			get
			{
				return this.GetTable<BankAccount>();
			}
		}
		
		public System.Data.Linq.Table<Depot> Depot
		{
			get
			{
				return this.GetTable<Depot>();
			}
		}
		
		public System.Data.Linq.Table<LeasingCalculator> LeasingCalculator
		{
			get
			{
				return this.GetTable<LeasingCalculator>();
			}
		}
		
		public System.Data.Linq.Table<LoanCalculator> LoanCalculator
		{
			get
			{
				return this.GetTable<LoanCalculator>();
			}
		}
		
		public System.Data.Linq.Table<LoanData> LoanData
		{
			get
			{
				return this.GetTable<LoanData>();
			}
		}
		
		public System.Data.Linq.Table<ManagerProfile> ManagerProfile
		{
			get
			{
				return this.GetTable<ManagerProfile>();
			}
		}
		
		public System.Data.Linq.Table<ReturnCalculator> ReturnCalculator
		{
			get
			{
				return this.GetTable<ReturnCalculator>();
			}
		}
		
		public System.Data.Linq.Table<Stocks> Stocks
		{
			get
			{
				return this.GetTable<Stocks>();
			}
		}
		
		public System.Data.Linq.Table<StocksMap> StocksMap
		{
			get
			{
				return this.GetTable<StocksMap>();
			}
		}
		
		public System.Data.Linq.Table<UserLines> UserLines
		{
			get
			{
				return this.GetTable<UserLines>();
			}
		}
		
		public System.Data.Linq.Table<UserProfile> UserProfile
		{
			get
			{
				return this.GetTable<UserProfile>();
			}
		}
		
		public System.Data.Linq.Table<Transactions> Transactions
		{
			get
			{
				return this.GetTable<Transactions>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WatchList")]
	public partial class WatchList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WatchListID;
		
		private string _Name;
		
		private int _UserID;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWatchListIDChanging(int value);
    partial void OnWatchListIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public WatchList()
		{
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WatchListID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WatchListID
		{
			get
			{
				return this._WatchListID;
			}
			set
			{
				if ((this._WatchListID != value))
				{
					this.OnWatchListIDChanging(value);
					this.SendPropertyChanging();
					this._WatchListID = value;
					this.SendPropertyChanged("WatchListID");
					this.OnWatchListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_WatchList", Storage="_UserProfile", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.WatchList.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.WatchList.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BankAccount")]
	public partial class BankAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BankAccountID;
		
		private System.Nullable<decimal> _AccountBalance;
		
		private int _UserID;
		
		private EntitySet<Transactions> _Transactions;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBankAccountIDChanging(int value);
    partial void OnBankAccountIDChanged();
    partial void OnAccountBalanceChanging(System.Nullable<decimal> value);
    partial void OnAccountBalanceChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public BankAccount()
		{
			this._Transactions = new EntitySet<Transactions>(new Action<Transactions>(this.attach_Transactions), new Action<Transactions>(this.detach_Transactions));
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankAccountID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BankAccountID
		{
			get
			{
				return this._BankAccountID;
			}
			set
			{
				if ((this._BankAccountID != value))
				{
					this.OnBankAccountIDChanging(value);
					this.SendPropertyChanging();
					this._BankAccountID = value;
					this.SendPropertyChanged("BankAccountID");
					this.OnBankAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountBalance", DbType="Money")]
		public System.Nullable<decimal> AccountBalance
		{
			get
			{
				return this._AccountBalance;
			}
			set
			{
				if ((this._AccountBalance != value))
				{
					this.OnAccountBalanceChanging(value);
					this.SendPropertyChanging();
					this._AccountBalance = value;
					this.SendPropertyChanged("AccountBalance");
					this.OnAccountBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BankAccount_Transactions", Storage="_Transactions", ThisKey="BankAccountID", OtherKey="BankAccountID")]
		public EntitySet<Transactions> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_BankAccount", Storage="_UserProfile", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.BankAccount.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.BankAccount.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transactions entity)
		{
			this.SendPropertyChanging();
			entity.BankAccount = this;
		}
		
		private void detach_Transactions(Transactions entity)
		{
			this.SendPropertyChanging();
			entity.BankAccount = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Depot")]
	public partial class Depot : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepotID;
		
		private int _UserID;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepotIDChanging(int value);
    partial void OnDepotIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public Depot()
		{
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepotID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DepotID
		{
			get
			{
				return this._DepotID;
			}
			set
			{
				if ((this._DepotID != value))
				{
					this.OnDepotIDChanging(value);
					this.SendPropertyChanging();
					this._DepotID = value;
					this.SendPropertyChanged("DepotID");
					this.OnDepotIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_Depot", Storage="_UserProfile", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.Depot.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.Depot.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeasingCalculator")]
	public partial class LeasingCalculator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LeasingID;
		
		private System.Nullable<int> _Interest;
		
		private System.Nullable<short> _PaymentInterval;
		
		private string _PaymentMethod;
		
		private string _Duration;
		
		private string _InternalDiscountRate;
		
		private System.Nullable<decimal> _Deposit;
		
		private System.Nullable<decimal> _ResidualValue;
		
		private System.Nullable<decimal> _LeasingRate;
		
		private System.Nullable<decimal> _StartAmount;
		
		private int _UserID;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLeasingIDChanging(int value);
    partial void OnLeasingIDChanged();
    partial void OnInterestChanging(System.Nullable<int> value);
    partial void OnInterestChanged();
    partial void OnPaymentIntervalChanging(System.Nullable<short> value);
    partial void OnPaymentIntervalChanged();
    partial void OnPaymentMethodChanging(string value);
    partial void OnPaymentMethodChanged();
    partial void OnDurationChanging(string value);
    partial void OnDurationChanged();
    partial void OnInternalDiscountRateChanging(string value);
    partial void OnInternalDiscountRateChanged();
    partial void OnDepositChanging(System.Nullable<decimal> value);
    partial void OnDepositChanged();
    partial void OnResidualValueChanging(System.Nullable<decimal> value);
    partial void OnResidualValueChanged();
    partial void OnLeasingRateChanging(System.Nullable<decimal> value);
    partial void OnLeasingRateChanged();
    partial void OnStartAmountChanging(System.Nullable<decimal> value);
    partial void OnStartAmountChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public LeasingCalculator()
		{
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeasingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LeasingID
		{
			get
			{
				return this._LeasingID;
			}
			set
			{
				if ((this._LeasingID != value))
				{
					this.OnLeasingIDChanging(value);
					this.SendPropertyChanging();
					this._LeasingID = value;
					this.SendPropertyChanged("LeasingID");
					this.OnLeasingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Interest", DbType="Int")]
		public System.Nullable<int> Interest
		{
			get
			{
				return this._Interest;
			}
			set
			{
				if ((this._Interest != value))
				{
					this.OnInterestChanging(value);
					this.SendPropertyChanging();
					this._Interest = value;
					this.SendPropertyChanged("Interest");
					this.OnInterestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentInterval", DbType="SmallInt")]
		public System.Nullable<short> PaymentInterval
		{
			get
			{
				return this._PaymentInterval;
			}
			set
			{
				if ((this._PaymentInterval != value))
				{
					this.OnPaymentIntervalChanging(value);
					this.SendPropertyChanging();
					this._PaymentInterval = value;
					this.SendPropertyChanged("PaymentInterval");
					this.OnPaymentIntervalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentMethod", DbType="VarChar(50)")]
		public string PaymentMethod
		{
			get
			{
				return this._PaymentMethod;
			}
			set
			{
				if ((this._PaymentMethod != value))
				{
					this.OnPaymentMethodChanging(value);
					this.SendPropertyChanging();
					this._PaymentMethod = value;
					this.SendPropertyChanged("PaymentMethod");
					this.OnPaymentMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="VarChar(50)")]
		public string Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InternalDiscountRate", DbType="VarChar(50)")]
		public string InternalDiscountRate
		{
			get
			{
				return this._InternalDiscountRate;
			}
			set
			{
				if ((this._InternalDiscountRate != value))
				{
					this.OnInternalDiscountRateChanging(value);
					this.SendPropertyChanging();
					this._InternalDiscountRate = value;
					this.SendPropertyChanged("InternalDiscountRate");
					this.OnInternalDiscountRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deposit", DbType="Money")]
		public System.Nullable<decimal> Deposit
		{
			get
			{
				return this._Deposit;
			}
			set
			{
				if ((this._Deposit != value))
				{
					this.OnDepositChanging(value);
					this.SendPropertyChanging();
					this._Deposit = value;
					this.SendPropertyChanged("Deposit");
					this.OnDepositChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResidualValue", DbType="Money")]
		public System.Nullable<decimal> ResidualValue
		{
			get
			{
				return this._ResidualValue;
			}
			set
			{
				if ((this._ResidualValue != value))
				{
					this.OnResidualValueChanging(value);
					this.SendPropertyChanging();
					this._ResidualValue = value;
					this.SendPropertyChanged("ResidualValue");
					this.OnResidualValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeasingRate", DbType="Money")]
		public System.Nullable<decimal> LeasingRate
		{
			get
			{
				return this._LeasingRate;
			}
			set
			{
				if ((this._LeasingRate != value))
				{
					this.OnLeasingRateChanging(value);
					this.SendPropertyChanging();
					this._LeasingRate = value;
					this.SendPropertyChanged("LeasingRate");
					this.OnLeasingRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartAmount", DbType="Money")]
		public System.Nullable<decimal> StartAmount
		{
			get
			{
				return this._StartAmount;
			}
			set
			{
				if ((this._StartAmount != value))
				{
					this.OnStartAmountChanging(value);
					this.SendPropertyChanging();
					this._StartAmount = value;
					this.SendPropertyChanged("StartAmount");
					this.OnStartAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_LeasingCalculator", Storage="_UserProfile", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.LeasingCalculator.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.LeasingCalculator.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoanCalculator")]
	public partial class LoanCalculator
	{
		
		private System.Data.Linq.Binary _BulletLoan;
		
		private string _InterestMethod;
		
		private System.Nullable<decimal> _MinimumRepaymentRate;
		
		private int _LoanID;
		
		public LoanCalculator()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BulletLoan", DbType="Binary(1)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary BulletLoan
		{
			get
			{
				return this._BulletLoan;
			}
			set
			{
				if ((this._BulletLoan != value))
				{
					this._BulletLoan = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InterestMethod", DbType="VarChar(50)")]
		public string InterestMethod
		{
			get
			{
				return this._InterestMethod;
			}
			set
			{
				if ((this._InterestMethod != value))
				{
					this._InterestMethod = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinimumRepaymentRate", DbType="Money")]
		public System.Nullable<decimal> MinimumRepaymentRate
		{
			get
			{
				return this._MinimumRepaymentRate;
			}
			set
			{
				if ((this._MinimumRepaymentRate != value))
				{
					this._MinimumRepaymentRate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanID", DbType="Int NOT NULL")]
		public int LoanID
		{
			get
			{
				return this._LoanID;
			}
			set
			{
				if ((this._LoanID != value))
				{
					this._LoanID = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoanData")]
	public partial class LoanData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LoanID;
		
		private System.Nullable<decimal> _loanAmount;
		
		private System.Nullable<decimal> _processingFee;
		
		private System.Nullable<double> _interestRate;
		
		private System.Nullable<int> _rateOption;
		
		private System.Nullable<decimal> _repaymentRate;
		
		private System.Nullable<int> _repaymentInterval;
		
		private System.Nullable<int> _modeOfPayment;
		
		private System.Nullable<decimal> _ballonPayment;
		
		private System.Nullable<int> _duration;
		
		private System.Nullable<int> _durationMode;
		
		private System.Nullable<decimal> _remainingDebt;
		
		private System.Nullable<int> _calculateOption;
		
		private System.Nullable<int> _UserID;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoanIDChanging(int value);
    partial void OnLoanIDChanged();
    partial void OnloanAmountChanging(System.Nullable<decimal> value);
    partial void OnloanAmountChanged();
    partial void OnprocessingFeeChanging(System.Nullable<decimal> value);
    partial void OnprocessingFeeChanged();
    partial void OninterestRateChanging(System.Nullable<double> value);
    partial void OninterestRateChanged();
    partial void OnrateOptionChanging(System.Nullable<int> value);
    partial void OnrateOptionChanged();
    partial void OnrepaymentRateChanging(System.Nullable<decimal> value);
    partial void OnrepaymentRateChanged();
    partial void OnrepaymentIntervalChanging(System.Nullable<int> value);
    partial void OnrepaymentIntervalChanged();
    partial void OnmodeOfPaymentChanging(System.Nullable<int> value);
    partial void OnmodeOfPaymentChanged();
    partial void OnballonPaymentChanging(System.Nullable<decimal> value);
    partial void OnballonPaymentChanged();
    partial void OndurationChanging(System.Nullable<int> value);
    partial void OndurationChanged();
    partial void OndurationModeChanging(System.Nullable<int> value);
    partial void OndurationModeChanged();
    partial void OnremainingDebtChanging(System.Nullable<decimal> value);
    partial void OnremainingDebtChanged();
    partial void OncalculateOptionChanging(System.Nullable<int> value);
    partial void OncalculateOptionChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    #endregion
		
		public LoanData()
		{
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoanID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LoanID
		{
			get
			{
				return this._LoanID;
			}
			set
			{
				if ((this._LoanID != value))
				{
					this.OnLoanIDChanging(value);
					this.SendPropertyChanging();
					this._LoanID = value;
					this.SendPropertyChanged("LoanID");
					this.OnLoanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_loanAmount", DbType="Money")]
		public System.Nullable<decimal> loanAmount
		{
			get
			{
				return this._loanAmount;
			}
			set
			{
				if ((this._loanAmount != value))
				{
					this.OnloanAmountChanging(value);
					this.SendPropertyChanging();
					this._loanAmount = value;
					this.SendPropertyChanged("loanAmount");
					this.OnloanAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_processingFee", DbType="Money")]
		public System.Nullable<decimal> processingFee
		{
			get
			{
				return this._processingFee;
			}
			set
			{
				if ((this._processingFee != value))
				{
					this.OnprocessingFeeChanging(value);
					this.SendPropertyChanging();
					this._processingFee = value;
					this.SendPropertyChanged("processingFee");
					this.OnprocessingFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_interestRate", DbType="Float")]
		public System.Nullable<double> interestRate
		{
			get
			{
				return this._interestRate;
			}
			set
			{
				if ((this._interestRate != value))
				{
					this.OninterestRateChanging(value);
					this.SendPropertyChanging();
					this._interestRate = value;
					this.SendPropertyChanged("interestRate");
					this.OninterestRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rateOption", DbType="Int")]
		public System.Nullable<int> rateOption
		{
			get
			{
				return this._rateOption;
			}
			set
			{
				if ((this._rateOption != value))
				{
					this.OnrateOptionChanging(value);
					this.SendPropertyChanging();
					this._rateOption = value;
					this.SendPropertyChanged("rateOption");
					this.OnrateOptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_repaymentRate", DbType="Money")]
		public System.Nullable<decimal> repaymentRate
		{
			get
			{
				return this._repaymentRate;
			}
			set
			{
				if ((this._repaymentRate != value))
				{
					this.OnrepaymentRateChanging(value);
					this.SendPropertyChanging();
					this._repaymentRate = value;
					this.SendPropertyChanged("repaymentRate");
					this.OnrepaymentRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_repaymentInterval", DbType="Int")]
		public System.Nullable<int> repaymentInterval
		{
			get
			{
				return this._repaymentInterval;
			}
			set
			{
				if ((this._repaymentInterval != value))
				{
					this.OnrepaymentIntervalChanging(value);
					this.SendPropertyChanging();
					this._repaymentInterval = value;
					this.SendPropertyChanged("repaymentInterval");
					this.OnrepaymentIntervalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modeOfPayment", DbType="Int")]
		public System.Nullable<int> modeOfPayment
		{
			get
			{
				return this._modeOfPayment;
			}
			set
			{
				if ((this._modeOfPayment != value))
				{
					this.OnmodeOfPaymentChanging(value);
					this.SendPropertyChanging();
					this._modeOfPayment = value;
					this.SendPropertyChanged("modeOfPayment");
					this.OnmodeOfPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ballonPayment", DbType="Money")]
		public System.Nullable<decimal> ballonPayment
		{
			get
			{
				return this._ballonPayment;
			}
			set
			{
				if ((this._ballonPayment != value))
				{
					this.OnballonPaymentChanging(value);
					this.SendPropertyChanging();
					this._ballonPayment = value;
					this.SendPropertyChanged("ballonPayment");
					this.OnballonPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_duration", DbType="Int")]
		public System.Nullable<int> duration
		{
			get
			{
				return this._duration;
			}
			set
			{
				if ((this._duration != value))
				{
					this.OndurationChanging(value);
					this.SendPropertyChanging();
					this._duration = value;
					this.SendPropertyChanged("duration");
					this.OndurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_durationMode", DbType="Int")]
		public System.Nullable<int> durationMode
		{
			get
			{
				return this._durationMode;
			}
			set
			{
				if ((this._durationMode != value))
				{
					this.OndurationModeChanging(value);
					this.SendPropertyChanging();
					this._durationMode = value;
					this.SendPropertyChanged("durationMode");
					this.OndurationModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_remainingDebt", DbType="Money")]
		public System.Nullable<decimal> remainingDebt
		{
			get
			{
				return this._remainingDebt;
			}
			set
			{
				if ((this._remainingDebt != value))
				{
					this.OnremainingDebtChanging(value);
					this.SendPropertyChanging();
					this._remainingDebt = value;
					this.SendPropertyChanged("remainingDebt");
					this.OnremainingDebtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_calculateOption", DbType="Int")]
		public System.Nullable<int> calculateOption
		{
			get
			{
				return this._calculateOption;
			}
			set
			{
				if ((this._calculateOption != value))
				{
					this.OncalculateOptionChanging(value);
					this.SendPropertyChanging();
					this._calculateOption = value;
					this.SendPropertyChanged("calculateOption");
					this.OncalculateOptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_LoanData", Storage="_UserProfile", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.LoanData.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.LoanData.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ManagerProfile")]
	public partial class ManagerProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccountID;
		
		private string _UserName;
		
		private string _Password;
		
		private string _TempPassword;
		
		private System.Data.Linq.Binary _UseType;
		
		private EntitySet<UserProfile> _UserProfile;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnTempPasswordChanging(string value);
    partial void OnTempPasswordChanged();
    partial void OnUseTypeChanging(System.Data.Linq.Binary value);
    partial void OnUseTypeChanged();
    #endregion
		
		public ManagerProfile()
		{
			this._UserProfile = new EntitySet<UserProfile>(new Action<UserProfile>(this.attach_UserProfile), new Action<UserProfile>(this.detach_UserProfile));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(250)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TempPassword", DbType="VarChar(250)")]
		public string TempPassword
		{
			get
			{
				return this._TempPassword;
			}
			set
			{
				if ((this._TempPassword != value))
				{
					this.OnTempPasswordChanging(value);
					this.SendPropertyChanging();
					this._TempPassword = value;
					this.SendPropertyChanged("TempPassword");
					this.OnTempPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UseType", DbType="Binary(1)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary UseType
		{
			get
			{
				return this._UseType;
			}
			set
			{
				if ((this._UseType != value))
				{
					this.OnUseTypeChanging(value);
					this.SendPropertyChanging();
					this._UseType = value;
					this.SendPropertyChanged("UseType");
					this.OnUseTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ManagerProfile_UserProfile", Storage="_UserProfile", ThisKey="AccountID", OtherKey="AccountID")]
		public EntitySet<UserProfile> UserProfile
		{
			get
			{
				return this._UserProfile;
			}
			set
			{
				this._UserProfile.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserProfile(UserProfile entity)
		{
			this.SendPropertyChanging();
			entity.ManagerProfile = this;
		}
		
		private void detach_UserProfile(UserProfile entity)
		{
			this.SendPropertyChanging();
			entity.ManagerProfile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReturnCalculator")]
	public partial class ReturnCalculator
	{
		
		private System.Nullable<int> _ReturnID;
		
		public ReturnCalculator()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnID", DbType="Int")]
		public System.Nullable<int> ReturnID
		{
			get
			{
				return this._ReturnID;
			}
			set
			{
				if ((this._ReturnID != value))
				{
					this._ReturnID = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stocks")]
	public partial class Stocks : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StockID;
		
		private string _Name;
		
		private string _Symbol;
		
		private string _StockExchange;
		
		private string _Typ;
		
		private EntitySet<StocksMap> _StocksMap;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStockIDChanging(int value);
    partial void OnStockIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSymbolChanging(string value);
    partial void OnSymbolChanged();
    partial void OnStockExchangeChanging(string value);
    partial void OnStockExchangeChanged();
    partial void OnTypChanging(string value);
    partial void OnTypChanged();
    #endregion
		
		public Stocks()
		{
			this._StocksMap = new EntitySet<StocksMap>(new Action<StocksMap>(this.attach_StocksMap), new Action<StocksMap>(this.detach_StocksMap));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Symbol", DbType="VarChar(10)")]
		public string Symbol
		{
			get
			{
				return this._Symbol;
			}
			set
			{
				if ((this._Symbol != value))
				{
					this.OnSymbolChanging(value);
					this.SendPropertyChanging();
					this._Symbol = value;
					this.SendPropertyChanged("Symbol");
					this.OnSymbolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockExchange", DbType="VarChar(10)")]
		public string StockExchange
		{
			get
			{
				return this._StockExchange;
			}
			set
			{
				if ((this._StockExchange != value))
				{
					this.OnStockExchangeChanging(value);
					this.SendPropertyChanging();
					this._StockExchange = value;
					this.SendPropertyChanged("StockExchange");
					this.OnStockExchangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Typ", DbType="VarChar(50)")]
		public string Typ
		{
			get
			{
				return this._Typ;
			}
			set
			{
				if ((this._Typ != value))
				{
					this.OnTypChanging(value);
					this.SendPropertyChanging();
					this._Typ = value;
					this.SendPropertyChanged("Typ");
					this.OnTypChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stocks_StocksMap", Storage="_StocksMap", ThisKey="StockID", OtherKey="StockID")]
		public EntitySet<StocksMap> StocksMap
		{
			get
			{
				return this._StocksMap;
			}
			set
			{
				this._StocksMap.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StocksMap(StocksMap entity)
		{
			this.SendPropertyChanging();
			entity.Stocks = this;
		}
		
		private void detach_StocksMap(StocksMap entity)
		{
			this.SendPropertyChanging();
			entity.Stocks = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StocksMap")]
	public partial class StocksMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StocksMapID;
		
		private char _Category;
		
		private int _CategoryID;
		
		private int _StockID;
		
		private System.Nullable<decimal> _PurchasePrice;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<System.DateTime> _PurchaseDate;
		
		private EntitySet<UserLines> _UserLines;
		
		private EntityRef<Stocks> _Stocks;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStocksMapIDChanging(int value);
    partial void OnStocksMapIDChanged();
    partial void OnCategoryChanging(char value);
    partial void OnCategoryChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnStockIDChanging(int value);
    partial void OnStockIDChanged();
    partial void OnPurchasePriceChanging(System.Nullable<decimal> value);
    partial void OnPurchasePriceChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnPurchaseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPurchaseDateChanged();
    #endregion
		
		public StocksMap()
		{
			this._UserLines = new EntitySet<UserLines>(new Action<UserLines>(this.attach_UserLines), new Action<UserLines>(this.detach_UserLines));
			this._Stocks = default(EntityRef<Stocks>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StocksMapID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StocksMapID
		{
			get
			{
				return this._StocksMapID;
			}
			set
			{
				if ((this._StocksMapID != value))
				{
					this.OnStocksMapIDChanging(value);
					this.SendPropertyChanging();
					this._StocksMapID = value;
					this.SendPropertyChanged("StocksMapID");
					this.OnStocksMapIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="Char(1) NOT NULL")]
		public char Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", DbType="Int NOT NULL")]
		public int StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					if (this._Stocks.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchasePrice", DbType="Money")]
		public System.Nullable<decimal> PurchasePrice
		{
			get
			{
				return this._PurchasePrice;
			}
			set
			{
				if ((this._PurchasePrice != value))
				{
					this.OnPurchasePriceChanging(value);
					this.SendPropertyChanging();
					this._PurchasePrice = value;
					this.SendPropertyChanged("PurchasePrice");
					this.OnPurchasePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseDate", DbType="Date")]
		public System.Nullable<System.DateTime> PurchaseDate
		{
			get
			{
				return this._PurchaseDate;
			}
			set
			{
				if ((this._PurchaseDate != value))
				{
					this.OnPurchaseDateChanging(value);
					this.SendPropertyChanging();
					this._PurchaseDate = value;
					this.SendPropertyChanged("PurchaseDate");
					this.OnPurchaseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StocksMap_UserLines", Storage="_UserLines", ThisKey="StocksMapID", OtherKey="StocksMapID")]
		public EntitySet<UserLines> UserLines
		{
			get
			{
				return this._UserLines;
			}
			set
			{
				this._UserLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stocks_StocksMap", Storage="_Stocks", ThisKey="StockID", OtherKey="StockID", IsForeignKey=true)]
		public Stocks Stocks
		{
			get
			{
				return this._Stocks.Entity;
			}
			set
			{
				Stocks previousValue = this._Stocks.Entity;
				if (((previousValue != value) 
							|| (this._Stocks.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stocks.Entity = null;
						previousValue.StocksMap.Remove(this);
					}
					this._Stocks.Entity = value;
					if ((value != null))
					{
						value.StocksMap.Add(this);
						this._StockID = value.StockID;
					}
					else
					{
						this._StockID = default(int);
					}
					this.SendPropertyChanged("Stocks");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserLines(UserLines entity)
		{
			this.SendPropertyChanging();
			entity.StocksMap = this;
		}
		
		private void detach_UserLines(UserLines entity)
		{
			this.SendPropertyChanging();
			entity.StocksMap = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserLines")]
	public partial class UserLines : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LineID;
		
		private int _StocksMapID;
		
		private double _PricePoint1;
		
		private double _PricePoint2;
		
		private double _TimePoint1;
		
		private double _TimePoint2;
		
		private string _LineColor;
		
		private int _UserID;
		
		private System.Nullable<short> _Thickness;
		
		private EntityRef<StocksMap> _StocksMap;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLineIDChanging(int value);
    partial void OnLineIDChanged();
    partial void OnStocksMapIDChanging(int value);
    partial void OnStocksMapIDChanged();
    partial void OnPricePoint1Changing(double value);
    partial void OnPricePoint1Changed();
    partial void OnPricePoint2Changing(double value);
    partial void OnPricePoint2Changed();
    partial void OnTimePoint1Changing(double value);
    partial void OnTimePoint1Changed();
    partial void OnTimePoint2Changing(double value);
    partial void OnTimePoint2Changed();
    partial void OnLineColorChanging(string value);
    partial void OnLineColorChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnThicknessChanging(System.Nullable<short> value);
    partial void OnThicknessChanged();
    #endregion
		
		public UserLines()
		{
			this._StocksMap = default(EntityRef<StocksMap>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LineID
		{
			get
			{
				return this._LineID;
			}
			set
			{
				if ((this._LineID != value))
				{
					this.OnLineIDChanging(value);
					this.SendPropertyChanging();
					this._LineID = value;
					this.SendPropertyChanged("LineID");
					this.OnLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StocksMapID", DbType="Int NOT NULL")]
		public int StocksMapID
		{
			get
			{
				return this._StocksMapID;
			}
			set
			{
				if ((this._StocksMapID != value))
				{
					if (this._StocksMap.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStocksMapIDChanging(value);
					this.SendPropertyChanging();
					this._StocksMapID = value;
					this.SendPropertyChanged("StocksMapID");
					this.OnStocksMapIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PricePoint1", DbType="Float NOT NULL")]
		public double PricePoint1
		{
			get
			{
				return this._PricePoint1;
			}
			set
			{
				if ((this._PricePoint1 != value))
				{
					this.OnPricePoint1Changing(value);
					this.SendPropertyChanging();
					this._PricePoint1 = value;
					this.SendPropertyChanged("PricePoint1");
					this.OnPricePoint1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PricePoint2", DbType="Float NOT NULL")]
		public double PricePoint2
		{
			get
			{
				return this._PricePoint2;
			}
			set
			{
				if ((this._PricePoint2 != value))
				{
					this.OnPricePoint2Changing(value);
					this.SendPropertyChanging();
					this._PricePoint2 = value;
					this.SendPropertyChanged("PricePoint2");
					this.OnPricePoint2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimePoint1", DbType="Float NOT NULL")]
		public double TimePoint1
		{
			get
			{
				return this._TimePoint1;
			}
			set
			{
				if ((this._TimePoint1 != value))
				{
					this.OnTimePoint1Changing(value);
					this.SendPropertyChanging();
					this._TimePoint1 = value;
					this.SendPropertyChanged("TimePoint1");
					this.OnTimePoint1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimePoint2", DbType="Float NOT NULL")]
		public double TimePoint2
		{
			get
			{
				return this._TimePoint2;
			}
			set
			{
				if ((this._TimePoint2 != value))
				{
					this.OnTimePoint2Changing(value);
					this.SendPropertyChanging();
					this._TimePoint2 = value;
					this.SendPropertyChanged("TimePoint2");
					this.OnTimePoint2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineColor", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LineColor
		{
			get
			{
				return this._LineColor;
			}
			set
			{
				if ((this._LineColor != value))
				{
					this.OnLineColorChanging(value);
					this.SendPropertyChanging();
					this._LineColor = value;
					this.SendPropertyChanged("LineColor");
					this.OnLineColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Thickness", DbType="SmallInt")]
		public System.Nullable<short> Thickness
		{
			get
			{
				return this._Thickness;
			}
			set
			{
				if ((this._Thickness != value))
				{
					this.OnThicknessChanging(value);
					this.SendPropertyChanging();
					this._Thickness = value;
					this.SendPropertyChanged("Thickness");
					this.OnThicknessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StocksMap_UserLines", Storage="_StocksMap", ThisKey="StocksMapID", OtherKey="StocksMapID", IsForeignKey=true)]
		public StocksMap StocksMap
		{
			get
			{
				return this._StocksMap.Entity;
			}
			set
			{
				StocksMap previousValue = this._StocksMap.Entity;
				if (((previousValue != value) 
							|| (this._StocksMap.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StocksMap.Entity = null;
						previousValue.UserLines.Remove(this);
					}
					this._StocksMap.Entity = value;
					if ((value != null))
					{
						value.UserLines.Add(this);
						this._StocksMapID = value.StocksMapID;
					}
					else
					{
						this._StocksMapID = default(int);
					}
					this.SendPropertyChanged("StocksMap");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserLines", Storage="_UserProfile", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.UserLines.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.UserLines.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfile")]
	public partial class UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _ForName;
		
		private string _LastName;
		
		private string _Address;
		
		private int _AccountID;
		
		private EntitySet<WatchList> _WatchList;
		
		private EntitySet<BankAccount> _BankAccount;
		
		private EntitySet<Depot> _Depot;
		
		private EntitySet<LeasingCalculator> _LeasingCalculator;
		
		private EntitySet<LoanData> _LoanData;
		
		private EntitySet<UserLines> _UserLines;
		
		private EntityRef<ManagerProfile> _ManagerProfile;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnForNameChanging(string value);
    partial void OnForNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    #endregion
		
		public UserProfile()
		{
			this._WatchList = new EntitySet<WatchList>(new Action<WatchList>(this.attach_WatchList), new Action<WatchList>(this.detach_WatchList));
			this._BankAccount = new EntitySet<BankAccount>(new Action<BankAccount>(this.attach_BankAccount), new Action<BankAccount>(this.detach_BankAccount));
			this._Depot = new EntitySet<Depot>(new Action<Depot>(this.attach_Depot), new Action<Depot>(this.detach_Depot));
			this._LeasingCalculator = new EntitySet<LeasingCalculator>(new Action<LeasingCalculator>(this.attach_LeasingCalculator), new Action<LeasingCalculator>(this.detach_LeasingCalculator));
			this._LoanData = new EntitySet<LoanData>(new Action<LoanData>(this.attach_LoanData), new Action<LoanData>(this.detach_LoanData));
			this._UserLines = new EntitySet<UserLines>(new Action<UserLines>(this.attach_UserLines), new Action<UserLines>(this.detach_UserLines));
			this._ManagerProfile = default(EntityRef<ManagerProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForName", DbType="VarChar(50)")]
		public string ForName
		{
			get
			{
				return this._ForName;
			}
			set
			{
				if ((this._ForName != value))
				{
					this.OnForNameChanging(value);
					this.SendPropertyChanging();
					this._ForName = value;
					this.SendPropertyChanged("ForName");
					this.OnForNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int NOT NULL")]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._ManagerProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_WatchList", Storage="_WatchList", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<WatchList> WatchList
		{
			get
			{
				return this._WatchList;
			}
			set
			{
				this._WatchList.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_BankAccount", Storage="_BankAccount", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<BankAccount> BankAccount
		{
			get
			{
				return this._BankAccount;
			}
			set
			{
				this._BankAccount.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_Depot", Storage="_Depot", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Depot> Depot
		{
			get
			{
				return this._Depot;
			}
			set
			{
				this._Depot.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_LeasingCalculator", Storage="_LeasingCalculator", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<LeasingCalculator> LeasingCalculator
		{
			get
			{
				return this._LeasingCalculator;
			}
			set
			{
				this._LeasingCalculator.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_LoanData", Storage="_LoanData", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<LoanData> LoanData
		{
			get
			{
				return this._LoanData;
			}
			set
			{
				this._LoanData.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserLines", Storage="_UserLines", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<UserLines> UserLines
		{
			get
			{
				return this._UserLines;
			}
			set
			{
				this._UserLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ManagerProfile_UserProfile", Storage="_ManagerProfile", ThisKey="AccountID", OtherKey="AccountID", IsForeignKey=true)]
		public ManagerProfile ManagerProfile
		{
			get
			{
				return this._ManagerProfile.Entity;
			}
			set
			{
				ManagerProfile previousValue = this._ManagerProfile.Entity;
				if (((previousValue != value) 
							|| (this._ManagerProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ManagerProfile.Entity = null;
						previousValue.UserProfile.Remove(this);
					}
					this._ManagerProfile.Entity = value;
					if ((value != null))
					{
						value.UserProfile.Add(this);
						this._AccountID = value.AccountID;
					}
					else
					{
						this._AccountID = default(int);
					}
					this.SendPropertyChanged("ManagerProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WatchList(WatchList entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_WatchList(WatchList entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_BankAccount(BankAccount entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_BankAccount(BankAccount entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_Depot(Depot entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_Depot(Depot entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_LeasingCalculator(LeasingCalculator entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_LeasingCalculator(LeasingCalculator entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_LoanData(LoanData entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_LoanData(LoanData entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_UserLines(UserLines entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_UserLines(UserLines entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Transactions")]
	public partial class Transactions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransactionID;
		
		private char _TransactionType;
		
		private int _BankAccountID;
		
		private System.DateTime _Created;
		
		private System.Nullable<decimal> _Amount;
		
		private EntityRef<BankAccount> _BankAccount;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransactionIDChanging(int value);
    partial void OnTransactionIDChanged();
    partial void OnTransactionTypeChanging(char value);
    partial void OnTransactionTypeChanged();
    partial void OnBankAccountIDChanging(int value);
    partial void OnBankAccountIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    #endregion
		
		public Transactions()
		{
			this._BankAccount = default(EntityRef<BankAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionType", DbType="Char(1) NOT NULL")]
		public char TransactionType
		{
			get
			{
				return this._TransactionType;
			}
			set
			{
				if ((this._TransactionType != value))
				{
					this.OnTransactionTypeChanging(value);
					this.SendPropertyChanging();
					this._TransactionType = value;
					this.SendPropertyChanged("TransactionType");
					this.OnTransactionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankAccountID", DbType="Int NOT NULL")]
		public int BankAccountID
		{
			get
			{
				return this._BankAccountID;
			}
			set
			{
				if ((this._BankAccountID != value))
				{
					if (this._BankAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBankAccountIDChanging(value);
					this.SendPropertyChanging();
					this._BankAccountID = value;
					this.SendPropertyChanged("BankAccountID");
					this.OnBankAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="Date NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money")]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BankAccount_Transactions", Storage="_BankAccount", ThisKey="BankAccountID", OtherKey="BankAccountID", IsForeignKey=true)]
		public BankAccount BankAccount
		{
			get
			{
				return this._BankAccount.Entity;
			}
			set
			{
				BankAccount previousValue = this._BankAccount.Entity;
				if (((previousValue != value) 
							|| (this._BankAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BankAccount.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._BankAccount.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._BankAccountID = value.BankAccountID;
					}
					else
					{
						this._BankAccountID = default(int);
					}
					this.SendPropertyChanged("BankAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
